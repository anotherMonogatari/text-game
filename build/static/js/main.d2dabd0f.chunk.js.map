{"version":3,"sources":["App.js","serviceWorker.js","reducers/reducer.js","index.js"],"names":["connect","state","dispatch","attackHandler","type","restartHandler","thunderHandler","armorHandler","healHandler","powerHandler","props","react_default","a","createElement","style","textAlign","you","hp","enemy","wound","color","armor","power","onClick","disabled","thunderCD","armorCD","healCD","powerCD","turn","Boolean","window","location","hostname","match","initState","reducer","arguments","length","undefined","action","minEnemyAttack","maxEnemyAttack","minYouAttack","maxYouAttack","attackRandom","min","max","Math","round","random","yourAttack","enemyAttack","yourHeal","thunderAttack","Object","objectSpread","document","reload","createStore","ReactDOM","render","es","store","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2dabd0f.chunk.js","sourcesContent":["import React from 'react';\n\nimport {connect} from 'react-redux';\n\nconst App = (props) => {\n  // Displaying stats while HP != 0 and fight result when HP < 0\n    return <section>\n      <div style={{textAlign: 'center'}}>\n      {(props.you.hp > 0 && props.enemy.hp > 0) && <div>\n        <p>You</p>\n        <p>HP: {props.you.hp} <span\n          style={(props.you.wound > 0) ? {color: 'red'} : {color: 'green'}}>{(props.you.wound !== 0) && -props.you.wound}</span></p>\n        <p>Armor: {props.you.armor}</p>\n        <p>Attack: {props.you.power}</p>\n        <p>Enemy</p>\n        <p>HP: {props.enemy.hp} <span \n          style={{color: 'red'}}>{(props.enemy.wound !== 0) && -props.enemy.wound}</span></p>\n        <p>Armor: {props.enemy.armor}</p>\n        <p>Attack: {props.enemy.power}</p>\n\n        <button onClick={props.attackHandler}>Attack</button>\n        <button onClick={props.thunderHandler} disabled={(props.you.thunderCD <= 0) ? false : true}>Thunder ({(props.you.thunderCD > 0) ? props.you.thunderCD : 'ready'})</button>\n        <button onClick={props.armorHandler} disabled={(props.you.armorCD <= 0) ? false : true}>Armor Up ({(props.you.armorCD > 0) ? props.you.armorCD : 'ready'})</button>\n        <button onClick={props.healHandler} disabled={(props.you.healCD <= 0) ? false : true}>Heal up ({(props.you.healCD > 0) ? props.you.healCD : 'ready'})</button>\n        <button onClick={props.powerHandler} disabled={(props.you.powerCD <= 0) ? false : true}>Power Up ({(props.you.powerCD > 0) ? props.you.powerCD : 'ready'})</button>\n      </div>}\n     \n      <button onClick={props.restartHandler}>Restart</button>\n\n      <h3>Turn {props.turn}</h3>\n\n      {(props.enemy.hp <= 0 && props.you.hp <= 0) && <p>Draw</p>} \n      {(props.you.hp <= 0 && props.enemy.hp > 0) && <p>You lost</p>}\n      {(props.enemy.hp <= 0 && props.you.hp > 0) && <p>You won</p>}\n    </div>\n    </section>\n}\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    attackHandler: () => dispatch({type: 'ATTACK'}),\n    restartHandler: () => dispatch({type: 'RESTART'}),\n    thunderHandler: () => dispatch({type: 'THUNDER'}),\n    armorHandler: () => dispatch({type: 'ARMOR'}),\n    healHandler: () => dispatch({type: 'HEAL'}),\n    powerHandler: () => dispatch({type: 'POWER'})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Characters stats\r\nconst initState = {\r\n    turn: 0,\r\n    you: {\r\n      hp: 1500,\r\n      power: 100,\r\n      armor: 10,\r\n      wound: 0,\r\n      thunderCD: 0,\r\n      healCD: 0,\r\n      armorCD: 0,\r\n      powerCD: 0\r\n    },\r\n    enemy: {\r\n      hp: 4000,\r\n      power: 120,\r\n      armor: 40,\r\n      wound: 0\r\n    }\r\n  }\r\n\r\nconst reducer = (state = initState, action) => {\r\n    // Randomazing attack\r\n    const minEnemyAttack = state.enemy.power * 0.9;\r\n    const maxEnemyAttack = state.enemy.power * 1.1;\r\n    const minYouAttack = state.you.power * 0.9;\r\n    const maxYouAttack = state.you.power * 1.1;\r\n    const attackRandom = (min, max) => {\r\n        return Math.round(Math.random() * (max - min + 1) ) + min;\r\n      }\r\n      // Calculating damage reduction by armor\r\n    const yourAttack = attackRandom(minYouAttack, maxYouAttack) - state.enemy.armor;\r\n    const enemyAttack = attackRandom(minEnemyAttack, maxEnemyAttack) - state.you.armor;\r\n\r\n    const yourHeal = attackRandom(minYouAttack, maxYouAttack);\r\n    // here you can change ballance of your abilities\r\n    const healMultiplier = 2;\r\n    const healTimeOut = 4;\r\n\r\n    const thunderMultiplier = 4;\r\n    const thunderAttack = (yourAttack + state.enemy.armor) * thunderMultiplier - state.enemy.armor;\r\n    const thunderTimeOut = 3;\r\n\r\n    const armorBonus = 40;\r\n    const armorDuration = 5;\r\n    const armorTimeOut = 9;\r\n    const powerBonus = 100;\r\n    const powerDuration = 5;\r\n    const powerTimeOut = 9;\r\n\r\n    if (action.type === 'ATTACK') {\r\n          // Changing HP of characters and writing wounds they got\r\n          // attack decrease abilities CDs by 1 (if CD <= 0 you can use it again)\r\n          // when using some ability it also decrease CD of other abilities by 1\r\n            // Basic attack\r\n            return {\r\n            turn: state.turn + 1,\r\n            you: {\r\n              ...state.you,\r\n              // Returning initial armor after 5 turns\r\n              // in the turn when armor up ends change your armor              \r\n            hp: (() => {\r\n              if (state.you.armorCD === armorDuration) {return state.you.hp - enemyAttack - armorBonus}\r\n              else {return state.you.hp - enemyAttack}\r\n            })(),\r\n            armor: (() => {\r\n              if (state.you.armorCD === armorDuration) {return initState.you.armor}\r\n              else {return state.you.armor}\r\n            })(),\r\n            wound: (() => {\r\n              if (state.you.armorCD === armorDuration) {return enemyAttack + armorBonus}\r\n              else {return enemyAttack}\r\n            })(),\r\n            // Returning initial power after 5 turns\r\n            power: (() => {\r\n              if (state.you.powerCD === powerDuration) {return initState.you.power}\r\n              else {return state.you.power}\r\n            })(),\r\n            thunderCD: state.you.thunderCD - 1,\r\n            healCD: state.you.healCD - 1,\r\n            powerCD: state.you.powerCD - 1,\r\n            armorCD: state.you.armorCD - 1\r\n          },\r\n            enemy: {\r\n              ...state.enemy,\r\n              // in the turn when power up ends change your attack\r\n            hp: (() => {\r\n              if (state.you.powerCD === powerDuration) {return state.enemy.hp - yourAttack + powerBonus}\r\n              else {return state.enemy.hp - yourAttack}\r\n            })(),\r\n            wound: (() => {\r\n              if (state.you.powerCD === powerDuration) {return yourAttack - powerBonus}\r\n              else {return yourAttack}\r\n            })()\r\n          }} }         \r\n    // Thunder strike mechanic\r\n    if (action.type === 'THUNDER') {\r\n        return {\r\n            turn: state.turn + 1,\r\n            you: {\r\n              ...state.you,\r\n              hp: (() => {\r\n                if (state.you.armorCD === armorDuration) {return state.you.hp - enemyAttack - armorBonus}\r\n                else {return state.you.hp - enemyAttack}\r\n              })(),\r\n              armor: (() => {\r\n                if (state.you.armorCD === armorDuration) {return initState.you.armor}\r\n                else {return state.you.armor}\r\n              })(),\r\n              wound: (() => {\r\n                if (state.you.armorCD === armorDuration) {return enemyAttack + armorBonus}\r\n                else {return enemyAttack}\r\n              })(),\r\n              power: (() => {\r\n                if (state.you.powerCD === powerDuration) {return initState.you.power}\r\n                else {return state.you.power}\r\n              })(),\r\n            thunderCD: thunderTimeOut,\r\n            healCD: state.you.healCD - 1,\r\n            powerCD: state.you.powerCD - 1,\r\n            armorCD: state.you.armorCD - 1\r\n          },\r\n            enemy: {\r\n              ...state.enemy,\r\n              hp: (() => {\r\n                if (state.you.powerCD === powerDuration) {return state.enemy.hp - thunderAttack + \r\n                  (yourAttack + state.enemy.armor - powerBonus) * 4 - state.enemy.armor}\r\n                else {return state.enemy.hp - thunderAttack}\r\n              })(),\r\n              wound: (() => {\r\n                if (state.you.powerCD === powerDuration) {return thunderAttack - \r\n                  (yourAttack + state.enemy.armor - powerBonus) * 4 - state.enemy.armor}\r\n                else {return thunderAttack}\r\n              })()\r\n          }}\r\n    }\r\n    // Healing mechanic\r\n    if (action.type === 'HEAL') {\r\n        return {\r\n            turn: state.turn + 1,\r\n            you: {\r\n              ...state.you,\r\n              // Preventing heal over max hp\r\n            hp: (() => {\r\n              if (state.you.powerCD === powerDuration) {\r\n                  if (state.you.hp - enemyAttack + (yourHeal-powerBonus)*healMultiplier >= initState.you.hp) {return initState.you.hp}\r\n                  else {return state.you.hp - enemyAttack + (yourHeal-powerBonus)*healMultiplier} }\r\n\r\n              else if (state.you.armorCD === armorDuration) {\r\n                if (state.you.hp - enemyAttack - armorBonus + (yourHeal)*healMultiplier >= initState.you.hp) {return initState.you.hp}\r\n                else {return state.you.hp - enemyAttack - armorBonus + (yourHeal)*healMultiplier} }\r\n\r\n              else {\r\n                  if (state.you.hp - enemyAttack + yourHeal*healMultiplier >= initState.you.hp) {return initState.you.hp}\r\n                  else {return state.you.hp - enemyAttack + yourHeal*healMultiplier}\r\n               } \r\n            })(),\r\n            power: (() => {\r\n              if (state.you.powerCD === powerDuration) {return initState.you.power}\r\n              else {return state.you.power}\r\n            })(),\r\n            armor: (() => {\r\n              if (state.you.armorCD === armorDuration) {return initState.you.armor}\r\n              else {return state.you.armor}\r\n            })(),\r\n            wound: (() => {\r\n              if (state.you.armorCD === armorDuration) {return enemyAttack + armorBonus  - yourHeal*healMultiplier}\r\n              else if (state.you.powerCD === powerDuration) {return enemyAttack - (yourHeal-powerBonus)*healMultiplier}\r\n              else {return enemyAttack  - yourHeal*healMultiplier}\r\n            })(),\r\n            healCD: healTimeOut,\r\n            thunderCD: state.you.thunderCD - 1,\r\n            powerCD: state.you.powerCD - 1,\r\n            armorCD: state.you.armorCD - 1\r\n          },\r\n            enemy: {\r\n              ...state.enemy,\r\n            wound: 0\r\n          }}\r\n    }\r\n    // Armor up\r\n    if (action.type === 'ARMOR') {\r\n      return {\r\n        turn: state.turn + 1,\r\n        you: {\r\n          ...state.you,\r\n        armor: state.you.armor + armorBonus,\r\n        power: (() => {\r\n          if (state.you.powerCD === powerDuration) {return initState.you.power}\r\n          else {return state.you.power}\r\n        })(),\r\n        hp: state.you.hp - enemyAttack + armorBonus,\r\n        wound: enemyAttack - armorBonus,\r\n        armorCD: armorTimeOut,\r\n        thunderCD: state.you.thunderCD - 1,\r\n        powerCD: state.you.powerCD - 1,\r\n        healCD: state.you.healCD - 1\r\n      },\r\n        enemy: {\r\n          ...state.enemy,\r\n        wound: 0\r\n      }}\r\n    }\r\n    // power up\r\n    if (action.type === 'POWER') {\r\n      return {\r\n        turn: state.turn + 1,\r\n        you: {\r\n          ...state.you,\r\n          hp: (() => {\r\n            if (state.you.armorCD === armorDuration) {return state.you.hp - enemyAttack - armorBonus}\r\n            else {return state.you.hp - enemyAttack}\r\n          })(),\r\n          armor: (() => {\r\n            if (state.you.armorCD === armorDuration) {return initState.you.armor}\r\n            else {return state.you.armor}\r\n          })(),\r\n          wound: (() => {\r\n            if (state.you.armorCD === armorDuration) {return enemyAttack + armorBonus}\r\n            else {return enemyAttack}\r\n          })(),\r\n        power: state.you.power + powerBonus,\r\n        powerCD: powerTimeOut,\r\n        armorCD: state.you.armorCD - 1,\r\n        thunderCD: state.you.thunderCD - 1,\r\n        healCD: state.you.healCD - 1\r\n      },\r\n        enemy: {\r\n          ...state.enemy,\r\n        wound: 0\r\n      }}\r\n    }\r\n    // RESTART button will refresh page\r\n    if (action.type === 'RESTART') {\r\n        document.location.reload()\r\n    }\r\n return state\r\n}\r\n\r\nexport default reducer\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport reducer from './reducers/reducer'\n\nconst state = createStore(reducer)\n\nReactDOM.render(<Provider store={state}>\n    <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}